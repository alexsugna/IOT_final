Basic documentation for using Face/MongoDB/EC2/S3 API wrapper

Url : https://18.222.187.211:5000 		(this is the EC2 public IP address)

Methods:
	
	Create a personGroup:

		/create_personGroup?personGroup_name=<personGroup_name>&description=<description>
	
	Identify if a person in image is in a specific personGroup:

		/identify_person?person_name=<person_name>&personGroup_name=<personGroup_name>			(and include image in request)

	Delete a personGroup:

		/delete_personGroup?personGroup_name=<personGroup_name>

	Add a person to a personGroup:

		/add_person_to_personGroup?person_name=<person_name>& personGroup_name=<personGroup_name>	(and include image in request)

	List all personGroups: (too see if you're trying to make a duplicate)
	
		/list_personGroups	(no params)

	
	
To include parameters in url request do this: 

url = 'https://18.222.187.211:5000/method?param1=value1&param2=value2 ... etc.
files = { 'file' : open('filename.jpg', 'rb') }
request = urequests.request("POST", url, files=files)

where parameter values are url encoded with a library like urlencode(). Should be included with micropython


command for getting ip address of ec2: 'dig +short myip.opendns.com @resolver1.opendns.com' : 18.222.187.211


import socket
import tqdm
import os

SEPARATOR = "<SEPARATOR>"
BUFFER_SIZE = 32 # send 4096 bytes each time step

# the ip address or hostname of the server, the receiver
# host = "74.64.134.11"
# host = '0.0.0.0'
host = ''
# the port, let's use 5001
port = 80
# the name of file we want to send, make sure it exists
filename = "test2.jpg"
# get the file size
filesize = os.path.getsize(filename)

# create the client socket
s = socket.socket()

print(f"[+] Connecting to {host}:{port}")
s.connect((host, port))
print("[+] Connected.")

# send the filename and filesize
s.send(f"{filename}{SEPARATOR}{filesize}".encode())

# start sending the file
progress = tqdm.tqdm(range(filesize), f"Sending {filename}", unit="B", unit_scale=True, unit_divisor=1024)
with open(filename, "rb") as f:
    for _ in progress:
    # while True:
        # read the bytes from the file
        bytes_read = f.read(BUFFER_SIZE)
        if not bytes_read:
            # file transmitting is done
            break
        # we use sendall to assure transimission in
        # busy networks
        s.sendall(bytes_read)
        # update the progress bar
        progress.update(len(bytes_read))
# close the socket
s.close()




